// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/24/2017 14:51:02"
                                                                                
// Verilog Test Bench template for design : counter
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module counter_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] amount;
reg clock;
reg direction;
reg [7:0] maxcnt;
reg [7:0] mincnt;
reg reset;
// wires                                               
wire [7:0]  count;

// assign statements (if any)                          
counter i1 (
// port map - connection between master ports and signals/registers   
	.amount(amount),
	.clock(clock),
	.count(count),
	.direction(direction),
	.maxcnt(maxcnt),
	.mincnt(mincnt),
	.reset(reset)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clock <= 0;
reset <= 0;
amount <= 4'b0011; //3
direction <= 0;
maxcnt <= 8'b0_010_0000; // 32
mincnt <= 8'b1_110_0000; // -32                                                      
// --> end                                             
$display("Running testbench");                       
end 
//clock                          
always
begin
 #50
 clock <= ~clock;
end
//                                                   
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin
#300
amount <= 4'b1010; //10
#200
direction <= 1;
#200
direction <= 0;
reset <= 1;
#100
reset <= 0;
#500
direction <= 1;
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule
